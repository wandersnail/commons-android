plugins {
    id 'com.android.library'
    id 'maven-publish'
    id 'signing'
    id 'tech.yanand.maven-central-publish' version '1.3.0'
}

def lib_version = '1.4.9'
def user_name = 'wandersnail'
def lib_group = 'cn.wandersnail'
def lib_artifact = 'commons-android'
def lib_description = 'utils for Android'
def lib_website = 'https://github.com/wandersnail/commons-android'
group = lib_group
version = lib_version

android {
    compileSdk rootProject.ext.compileSdkVersion
    defaultConfig {
        minSdk 19
        targetSdk rootProject.ext.targetSdkVersion

        consumerProguardFiles 'wscommons-consumer-rules.pro'
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    lintOptions {
        abortOnError false
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    compileOnly fileTree(dir: 'libs', include: ['*.jar'])
    compileOnly "androidx.appcompat:appcompat:$appcompat_version"
    compileOnly "androidx.exifinterface:exifinterface:$exifinterface_version"
    compileOnly "androidx.documentfile:documentfile:$documentfile_version"
}

tasks.register('sourcesJar', Jar) {
    archiveClassifier.set('sources')
    from android.sourceSets.main.java.srcDirs
}

tasks.register('javadoc', Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

tasks.register('javadocJar', Jar) {
    dependsOn javadoc
    archiveClassifier.set('javadoc')
    from javadoc.destinationDir
}

publishing {
    publications {
        release(MavenPublication) {
            groupId lib_group
            artifactId lib_artifact
            version lib_version
            description lib_description

            artifact(sourcesJar)
            artifact(javadocJar)
            // 依赖 bundleReleaseAar 这是构建生产渠道的aar包任务，并上传其产出的aar ,推荐
            afterEvaluate { artifact(tasks.getByName("bundleReleaseAar")) }

            pom {
                name = lib_artifact
                description = lib_description
                url = lib_website

                scm {
                    url = lib_website
                    connection = "scm:git:${lib_website}.git"
                    developerConnection = "scm:git:${lib_website}.git"
                }

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id = user_name
                        name = 'Zeng Fansheng'
                        email = 'bingmo977@qq.com'
                    }
                }
            }
        }
    }

    repositories {
    }
}

signing {
    sign publishing.publications.release
}

Properties properties = new Properties()
InputStream inputStream = project.rootProject.file('local.properties').newDataInputStream()
properties.load(inputStream)
String authTokenValue = properties.containsKey('authTokenValue') ? properties['authTokenValue'] : ''

mavenCentral {
    // 从 Sonatype 官方获取的 Publisher API 调用的 token，应为 Base64 编码后的 username:password
    authToken = authTokenValue
    // 上传是否应该自动发布。如果您希望手动执行此操作，请使用 'USER_MANAGED'。
    // 该属性是可选的，默认为 'AUTOMATIC'。
    publishingType = "AUTOMATIC"
    // 当发布类型为 'AUTOMATIC' 时，状态API获取 'PUBLISHING' 或 'PUBLISHED' 状态的最大等待时间
    // 或者当发布类型为 'USER_MANAGED' 时，获取 'VALIDATED' 状态。
    // 该属性是可选的，默认为60秒。
    maxWait = 60
}

javadoc {
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}